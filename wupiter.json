{
  "info": {
    "name": "Spring Boot Accelerator",
    "description": "Code generator for Spring Boot that creates a basic REST api with service and repository layer and uses a database running in a container.",
    "tags": [ "java", "Spring Boot", "gradle", "docker", "JPA", "postgres", "mysql", "mariadb", "REST", "JWT", "Keycloak" ]
  },
  "params": {
    "appName": {
      "type": "text",
      "description": "ie: example-api",
      "label": "Application Name",
      "defaultValue": "demo-service",
      "required": true
    },
    "packageName": {
      "type": "text",
      "description": "ie: com.example.app",
      "defaultValue": "com.demo",
      "required": true
    },
    "buildEngine": {
      "type": "radios",
      "values": [
        { "key": "gradle", "label": "Gradle" },
        { "key": "mvn", "label": "Maven" }
      ],
      "defaultValue": "gradle",
      "required": true
    },
    "javaVersion": {
      "type": "select",
      "values": [
        8, 9, 11, 16
      ],
      "defaultValue": 11,
      "required": true
    },
    "sqlDatabase": {
      "type": "select",
      "defaultValue": "postgres",
      "required": true,
      "values": [
        { "key": "postgres", "label": "PostgreSQL"},
        { "key": "mysql", "label": "MySQL"},
        { "key": "mariadb", "label": "MariaDB"},
        { "key": "mssql", "label": "SQL Server"}
      ]
    },
    "authentication": {
      "type": "select",
      "defaultValue": "none",
      "required": true,
      "values": [
        { "key": "none", "label": "None"},
        { "key": "keycloak-jwt", "label": "JWT with Keycloak"}
      ]
    },
    "features": {
      "type": "searchbox",
      "description": "Select features like static code analysis tools, etc.",
      "required": false,
      "allowMultiple": true,
      "values": [
        { "label": "Checkstyle coding standards", "key": "checkstyle" },
        { "label": "JaCoCo code coverage", "key": "jacoco" },
        { "label": "OWASP vulnerability check", "key": "owasp" },
        { "label": "Spotbugs check for bugs", "key": "spotbugs" },
        { "label": "PMD check for bugs", "key": "pmd" },
        { "label": "Kafka using Spring Cloud Stream", "key": "kafka" }
      ]
    }
  },
  "preProcessing": {
    "pathReplacements": [
      { "target":  "demo-api", "replacement":  "{{appName}}"},
      { "target":  "com/example/demo", "replacement":  "{{strReplace packageName '.' '/'}}"},
      { "target":  "TodoApplication", "replacement":  "{{CamelCase appName}}Application"}
    ],
    "textReplacements": [
      { "target":  "demo-api", "replacement":  "{{appName}}"},
      { "target":  "com.example.demo", "replacement":  "{{packageName}}"},
      { "target":  "TodoApplication", "replacement":  "{{CamelCase appName}}Application"},
      { "target":  "#!#", "replacement":  ""},
      { "target":  "<!--#", "replacement":  ""},
      { "target":  "#-->", "replacement":  ""},
      { "target":  "//#", "replacement":  ""}
    ]
  },
  "files": {
    "README.md": {
      "condition": "false"
    },
    "demo-api/gradle": {
      "condition": "buildEngine '==' 'gradle'",
      "static": true
    },
    "demo-api/build.gradle": {
      "condition": "buildEngine '==' 'gradle'"
    },
    "demo-api/gradlew": {
      "condition": "buildEngine '==' 'gradle'"
    },
    "demo-api/gradlew.bat": {
      "condition": "buildEngine '==' 'gradle'"
    },
    "demo-api/settings.gradle": {
      "condition": "buildEngine '==' 'gradle'"
    },
    "demo-api/.mvn": {
      "condition": "buildEngine '==' 'mvn'",
      "static": true
    },
    "demo-api/mvnw.cmd": {
      "condition": "buildEngine '==' 'mvn'",
      "static": true
    },
    "demo-api/mvnw": {
      "condition": "buildEngine '==' 'mvn'",
      "static": true
    },
    "demo-api/pom.xml": {
      "condition": "buildEngine '==' 'mvn'"
    },
    "demo-api/checkstyle.xml": {
      "condition": "'checkstyle' 'in' features"
    },
    "_devops/docker/keycloak": {
      "condition": "authentication '==' 'keycloak-jwt'"
    },
    "demo-api/src/main/java/com/example/demo/config/SecurityConfig.java": {
      "condition": "authentication '==' 'keycloak-jwt'"
    },
    "demo-api/src/main/java/com/example/demo/config/StreamConfig.java": {
      "condition": "'kafka' 'in' features"
    },
    "demo-api/src/main/java/com/example/demo/config/MethodSecurityConfig.java": {
      "condition": "authentication '==' 'keycloak-jwt'"
    },
    "demo-api/src/main/java/com/example/demo/security": {
      "condition": "authentication '==' 'keycloak-jwt'"
    },
    "demo-api/src/main/java/com/example/demo/service/TodoStreamService.java": {
      "condition": "'kafka' 'in' features"
    },
    "demo-api/src/main/java/com/demo/utils/spotbugs/SuppressFBWarnings.java": {
      "condition": "'spotbugs' 'in' features"
    },
    "demo-api/src/test/java/com/example/demo/service/TodoStreamServiceTest.java": {
      "condition": "'kafka' 'in' features"
    },
    "demo-api/src/test/postman/Keycloak OAuth2.postman_collection.json": {
      "condition": "authentication '==' 'keycloak-jwt'"
    }
  }
}
